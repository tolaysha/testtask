{"version":3,"sources":["store/kanban/actions.js","screens/kanban/kanban.jsx","components/paper/paper.jsx","components/navbar/navbar.jsx","screens/sberLayout/sberLayout.jsx","components/sidebar/sidebar.jsx","components/sidebar/sidebar.js","store/kanban/reducers.js","store/kanban/model.js","store/kanban/api.js","store/kanban/saga.js","App.js","serviceWorker.js","index.js"],"names":["getItems","createAction","getItemsSuccess","getItemsError","addItem","injectSheet","root","classes","other","match","useRouteMatch","dispatch","useDispatch","console","log","useEffect","state","Number","params","id","__filename","className","ClassNames","display","flexDirection","flexWrap","padding","item","border","minWidth","minHeight","lineHeight","margin","fontSize","color","backgroundColor","transition","cursor","transform","boxShadow","borderRadius","count","component","useSelector","items","Array","map","_","index","key","UlStyled","styled","ul","SberProfi","fontFamily","fontStyle","fontWeight","alignItems","listStyleType","SberWorks","Heading","h1","Paragraph","p","useStyles","createUseStyles","theme","Sidebar","props","useTheme","onClick","test","connect","handleActions","actions","payload","newState","rootReducers","combineReducers","getItemsWithDelay","data","Promise","resolve","reject","setTimeout","fetchItems","mySaga","action","call","itemsCount","put","massage","takeEvery","type","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","rootSaga","height","navbar","gridArea","sidebar","content","overflowY","App","path","SberLayout","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2a25639.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\r\nexport const getItems = createAction('/GET_ITEMS');\r\nexport const getItemsRequest = createAction('/GET_ITEMS_REQUEST');\r\nexport const getItemsSuccess = createAction('/GET_ITEMS_SUCCESS');\r\nexport const getItemsError = createAction('/GET_ITEMS_ERROR');\r\nexport const addItem = createAction('/ADD_ITEM');\r\n// export const getItems = items => ({\r\n//   type: 'GET_ITEMS',\r\n//   payload: items,\r\n// })\r\n","import React, { useEffect } from 'react';\r\nimport ClassNames from 'classnames';\r\nimport injectSheet from 'react-jss'\r\nimport Paper from '../../components/paper/paper.jsx'\r\nimport { useRouteMatch, } from \"react-router-dom\";\r\nimport { useDispatch } from 'react-redux'\r\nimport { getItems } from '../../store/kanban/actions.js'\r\nconst styles = {\r\n  root: {\r\n\r\n  },\r\n}\r\n\r\nlet Kanban = ({\r\n  classes,\r\n  ...other }) => {\r\n\r\n  let match = useRouteMatch();\r\n  const dispatch = useDispatch();\r\n  console.log('i am math from hook useRouterMath from kanban.jsx', match);\r\n  //const [Items, setItems] = useState();\r\n  useEffect((state) => {\r\n    console.log('i am state from useEffect-', state);\r\n    //getItems(Number(match.params.id));\r\n    console.log('i am dispatch in useEffect in kanban.jsx', dispatch);\r\n    console.log('i am getItems in useEffect in kanban.jsx', getItems);\r\n    dispatch(getItems(Number(match.params.id)))\r\n  }, [match.params.id]);\r\n\r\n  console.log('console check __filename from Kanban.jsx', __filename);\r\n  console.log('console check other from Kanban.jsx', other);\r\n  return <div className={ClassNames(classes.root)}>\r\n    <Paper />\r\n  </div>\r\n}\r\nexport default injectSheet(styles)(Kanban);\r\n//  export default Kanban;","import * as React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport injectSheet from 'react-jss'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n\r\nconst styles = {\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    padding: '5px',\r\n  },\r\n  item: {\r\n    border: '1px solid pink',\r\n    minWidth: '150px',\r\n    minHeight: '150px',\r\n    lineHeight: '150px',\r\n    margin: '5px',\r\n    fontSize: '56px',\r\n    color: 'darkblue',\r\n    backgroundColor: '#e7a61a',\r\n    transition: '0.15s ease',\r\n    '&:hover': {\r\n      backgroundColor: '#b9923e',\r\n      cursor: 'pointer',\r\n      transform: 'scale(1.1)',\r\n    },\r\n\r\n    boxShadow: `-webkit-box-shadow: 0px 0px 47px -27px rgba(0,0,0,0.72);\r\n    -moz-box-shadow: 0px 0px 47px -27px rgba(0,0,0,0.72);\r\n    box-shadow: 0px 0px 47px -27px rgba(0,0,0,0.72);`,\r\n    borderRadius: `border-radius: 19px 19px 19px 19px;\r\n    -moz-border-radius: 19px 19px 19px 19px;\r\n    -webkit-border-radius: 19px 19px 19px 19px;\r\n    border: 0px solid #000000;`\r\n  },\r\n}\r\nlet Paper = ({ classes, component }) => {\r\n  const count = useSelector(state => state.items.count)\r\n  return (<div className={ClassNames(classes.root)}>\r\n    {[...Array(count)].map((_, index) => <div key={index} className={ClassNames(classes.item)}>\r\n      {index}\r\n    </div>)}\r\n  </div>)\r\n\r\n}\r\nexport default injectSheet(styles)(Paper)","import * as React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport injectSheet from 'react-jss'\r\nimport styled from 'styled-components';\r\nconst UlStyled = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst styles = {\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'row'\r\n  },\r\n  // ul:{\r\n  //   display: 'flex',\r\n  //   flexDirection: 'column',\r\n  //   alignItems: 'flex-start',\r\n  // },\r\n  SberProfi: {\r\n    fontFamily: 'Roboto',\r\n    fontStyle: 'normal',\r\n    fontWeight: '500',\r\n    fontSize: '36px',\r\n    lineHeight: '42px',\r\n    alignItems: 'flex-end',\r\n    color: '#000000',\r\n    listStyleType: 'none',\r\n  },\r\n  SberWorks: {\r\n    fontFamily: 'Roboto',\r\n    fontStyle: 'normal',\r\n    fontWeight: 'normal',\r\n    fontSize: '14px',\r\n    lineHeight: '16px',\r\n    listStyleType: 'none',\r\n    color: '#5E788A',\r\n  }\r\n}\r\nlet Sidebar = ({ classes }) => {\r\n  return <div className={ClassNames(classes.root)}>\r\n\r\n    <UlStyled>\r\n      <li className={ClassNames(classes.SberProfi)}>SberProfi</li>\r\n      <li className={ClassNames(classes.SberWorks)}>SberWorks</li>\r\n    </UlStyled>\r\n  </div>\r\n\r\n}\r\nexport default injectSheet(styles)(Sidebar)","import * as React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport injectSheet from 'react-jss'\r\nimport styled from 'styled-components';\r\nconst Heading = styled.h1`\r\n  color: gray;\r\n  font-size: 1.5em;\r\n`;\r\nconst Paragraph = styled.p`\r\n  font-size: 1.1em;\r\n`;\r\n\r\n\r\nconst styles = {\r\n  root: {\r\n\r\n  },\r\n}\r\nlet SberLayout = ({ classes, ...other }) => {\r\n  console.log('i am props from sberLayout', other);\r\n\r\n  return <div className={ClassNames(classes.root)}>\r\n    <Heading>\r\n      Heading\r\n    </Heading>\r\n    <Paragraph>\r\n      Article's text\r\n    </Paragraph>\r\n  </div>\r\n}\r\nexport default injectSheet(styles)(SberLayout);","import * as React from 'react';\r\nimport ClassNames from 'classnames';\r\n// import injectSheet from 'react-jss'\r\nimport { createUseStyles, useTheme } from 'react-jss'\r\n//import { addItem } from '../../store/kanban/actions'\r\nlet useStyles = createUseStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column'\r\n  },\r\n  item: {\r\n    margin: '5px',\r\n    backgroundColor: 'blue',\r\n    color: 'white',\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n      backgroundColor: 'darkblue',\r\n    },\r\n    minHeight: '35px',\r\n    boxShadow: `-webkit-box-shadow: 0px 0px 47px -27px rgba(0,0,0,0.72);\r\n    -moz-box-shadow: 0px 0px 47px -27px rgba(0,0,0,0.72);\r\n    box-shadow: 0px 0px 47px -27px rgba(0,0,0,0.72);`,\r\n\r\n  },\r\n}))\r\n\r\nlet Sidebar = ({ addItem, ...props }) => {\r\n  console.log('i am props from sidebar.jsx', props)\r\n  //console.log('i am hook-store from sidebar.jsx',store)\r\n  console.log('i am addItem action from sidebar.jsx', addItem)\r\n  const theme = useTheme()\r\n  const classes = useStyles({ ...props, theme })\r\n  const handleAddButton = () => addItem();\r\n  return <div className={ClassNames(classes.root)}>\r\n    <button className={ClassNames(classes.item)}>Четные</button>\r\n    <button className={ClassNames(classes.item)}> Не четные</button>\r\n    <button onClick={handleAddButton} className={ClassNames(classes.item)}> Добавить +1</button>\r\n    <div className={ClassNames(classes.test)}></div>\r\n  </div>\r\n\r\n}\r\nexport default Sidebar;","import Sidebar from './sidebar.jsx'\r\nimport { connect } from \"react-redux\"\r\nimport { addItem } from '../../store/kanban/actions.js'\r\nconsole.log('i am sidebar.js (main)')\r\nlet mapStateToProps = (state) => {\r\n  console.log('i am state from sidebar.js', state);\r\n  return { items: state.items }//TODO remove type from state\r\n}\r\n\r\nexport default connect(mapStateToProps, { addItem })(Sidebar);","import { combineReducers } from 'redux'\r\nimport { initialState } from './model'\r\nimport { handleActions } from 'redux-actions';\r\nimport * as actions from './actions';\r\n\r\nconst items = handleActions({\r\n  [actions.addItem]: (state, { payload }) => {\r\n    console.log('i am ADD_ITEM from switch in reducer', state)\r\n    let newState = { ...state }\r\n    newState.count++;\r\n    return newState;\r\n  },\r\n\r\n  [actions.getItemsSuccess]: (state, { payload }) => {\r\n    console.log('i am GET_ITEMS_SUCCESS from switch in reducer', state);\r\n    return { count: payload };\r\n  }\r\n\r\n},\r\n  initialState()\r\n);\r\n\r\nconst rootReducers = combineReducers({\r\n  items\r\n})\r\nexport default rootReducers;","export const initialState = () => ({\r\n  count: 10,\r\n})","//рекурсия url до 5 щтук\r\n// const fetchUrl = url =>{\r\n//   let count = 0;\r\n//   console.log('fetchUrl');\r\n//   return new Promise((resolve, reject)=>{\r\n//       let reset = url =>{\r\n//           fetch(url)\r\n//               .then(res => {\r\n//                   if (res.ok) {\r\n//                       console.log('i am res.ok')\r\n//                       return resolve(res)\r\n//                   }else{\r\n//                       console.log('i am bad')\r\n//                       return reject(res)\r\n//                   }})\r\n//               .catch((reject)=>{\r\n//                   console.log(reject)\r\n//                   count<7?reset(url):Promise.reject();\r\n//                   count++;\r\n//                   console.log('misstake count',count)\r\n//               })\r\n//       }\r\n//       console.log('i am before reset first')\r\n//       reset(url)\r\n//   })\r\n\r\n// }\r\n\r\n\r\nexport const getItemsWithDelay = data => new Promise((resolve, reject) => {\r\n\r\n  setTimeout(() => {\r\n    // переведёт промис в состояние fulfilled с результатом \"result\"\r\n    resolve(data);\r\n  }, 1000);\r\n});\r\n\r\n","import { call, put, takeEvery } from 'redux-saga/effects'\r\nimport * as actions from './actions';\r\nimport { getItemsWithDelay } from './api'\r\n\r\n\r\nfunction* fetchItems(action) {\r\n   try {\r\n      console.log('i am action in block try in saga fetchitems', action);\r\n      console.log('i am getItemsWithDelay in saga', getItemsWithDelay);\r\n\r\n      const itemsCount = yield call(getItemsWithDelay, action.payload);\r\n      console.log('i am items in block try in saga fetchitems after call', itemsCount);\r\n      yield put(actions.getItemsSuccess(itemsCount));\r\n   } catch (e) {\r\n\r\n      yield put(actions.getItemsError(e.massage));\r\n   }\r\n}\r\n\r\nfunction* mySaga() {\r\n   yield takeEvery(actions.getItems().type, fetchItems);\r\n}\r\n\r\n\r\nexport default mySaga;\r\n\r\n","import React from 'react';\r\nimport { createStore, applyMiddleware } from \"redux\"\r\nimport { Provider } from 'react-redux'\r\nimport Kanban from './screens/kanban/kanban.jsx'\r\nimport Navbar from './components/navbar/navbar.jsx'\r\nimport SberLayout from './screens/sberLayout/sberLayout.jsx'\r\nimport Sidebar from './components/sidebar/sidebar.js'\r\nimport ClassNames from 'classnames';\r\nimport rootReducer from './store/kanban/reducers'\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './store/kanban/saga'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { createUseStyles, useTheme } from 'react-jss'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\nsagaMiddleware.run(rootSaga)\r\n// Using `theme` function is better when you have many theme dependant styles.\r\nlet useStyles = createUseStyles(theme => ({\r\n  root: {\r\n    display: 'grid',\r\n    'grid-template-columns': '1fr 7fr',\r\n    'grid-template-rows': '90px 1fr',\r\n    'grid-template-areas': '\"navbar navbar \" \"sidebar content \" \"sidebar content \"',\r\n    height: '100vh',\r\n  },\r\n  navbar: {\r\n    gridArea: 'navbar',\r\n    border: '1px solid #c1c1c1',\r\n  },\r\n  sidebar: {\r\n    gridArea: 'sidebar',\r\n    border: '1px solid #c1c1c1',\r\n  },\r\n  content: {\r\n    gridArea: 'content',\r\n    border: '1px solid #c1c1c1',\r\n    overflowY: 'scroll',\r\n\r\n  },\r\n  test: {\r\n    backgroundColor: '#999999'\r\n  }\r\n\r\n}))\r\n\r\n// Using function values might be better if you have only few theme dependant styles\r\n// and also props or state is used for other values.\r\n\r\nlet App = ({ ...props }) => {\r\n  const theme = useTheme();\r\n  const classes = useStyles({ ...props, theme })\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <div className={ClassNames(classes.root)}>\r\n          <div className={ClassNames(classes.navbar)}>\r\n            <Navbar />\r\n          </div>\r\n          <div className={ClassNames(classes.sidebar)}>\r\n            <Sidebar />\r\n          </div>\r\n          <Router>\r\n            <Switch>\r\n              <Route path=\"/about/:id\">\r\n                <div className={ClassNames(classes.content)}><Kanban/></div>\r\n              </Route>\r\n              <Route path=\"/sberLayout\" component={SberLayout}>\r\n              </Route>\r\n            </Switch>\r\n          </Router>\r\n        </div>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n//sagaMiddleware.run(rootSaga)\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}